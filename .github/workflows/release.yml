name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:

  build:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        label: [
          x86_64-pc-windows-msvc-portable,
          x86_64-unknown-linux-gnu-portable
        ]
        include:
          - label: x86_64-pc-windows-msvc-portable
            target: x86_64-pc-windows-msvc
            bins: --bin nvm
            ext: .exe
            os: windows
            toolchain: stable
          - label: x86_64-unknown-linux-gnu-portable
            target: x86_64-unknown-linux-gnu
            bins: --bin nvm
            exe:
            toolchain: stable
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{matrix.toolchain}}
        default: true
        target: ${{matrix.target}}
    - name: Release build
      uses: actions-rs/cargo@v1
      with:
        command: build
        # use-cross: ${{ matrix.os == 'ubuntu' }}
        args: --release ${{matrix.bins}} --target ${{matrix.target}}
    - uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.label}}
        path: |
          target/${{matrix.target}}/release/nvm${{matrix.ext}}

  test:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        target: [
          x86_64-pc-windows-msvc,
          x86_64-unknown-linux-gnu
        ]
        include:
          - target: x86_64-pc-windows-msvc
            os: windows
            toolchain: stable
          - target: x86_64-unknown-linux-gnu
            os: ubuntu
            toolchain: stable
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{matrix.toolchain}}
        default: true
        target: ${{matrix.target}}
    - name: Test
      uses: actions-rs/cargo@v1
      with:
        command: test
        # use-cross: ${{ matrix.os == 'ubuntu' }}
        args: --target ${{matrix.target}}

  package-portable:
    needs: [build,test]
    environment: package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download x86_64-pc-windows-msvc-portable artifact
      uses: actions/download-artifact@v4
      with:
        name: x86_64-pc-windows-msvc-portable
        path: target/x86_64-pc-windows-msvc-portable
    - name: Download x86_64-unknown-linux-gnu-portable artifact
      uses: actions/download-artifact@v4
      with:
        name: x86_64-unknown-linux-gnu-portable
        path: target/x86_64-unknown-linux-gnu-portable
    - name: Export version
      run: |
        export VERSION=$(echo $GH_REF | sed 's:refs/tags/v::')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      env:
          GH_REF: ${{ github.ref }}
    - name: Create archives
      run: |
        mkdir public

        cd target/x86_64-pc-windows-msvc-portable
        zip -r ../../public/nvm-${{ env.VERSION }}-x86_64-pc-windows-msvc-portable.zip .
        cd ../..

        cd target/x86_64-unknown-linux-gnu-portable
        tar -czvf ../../public/nvm-${{ env.VERSION }}-x86_64-unknown-linux-gnu-portable.tar.gz .
        cd ../..
    - uses: actions/upload-artifact@v4
      with:
        name: portable
        path: public/*.*

  deploy-github-release-binaries:
    needs: [package-portable]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: portable
        path: public
    - name: Release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "public/*.*"
        allowUpdates: true
        prerelease: false